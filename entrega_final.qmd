---
title: "Entrega Final Series"
author: "Leandro Beruueta,Lucca Frachelle , Cecilia Waksman"
date: today
warning: false
message: false
echo: false
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    theme:
      light: flatly
      dark: darkly
    fig-align: center
    toc-float: true
embed-resources: true
toc-location: right
toc-title: 'Contenido'
---

```{r}
library(forecast)
library(tidyverse)
library(tseries)
library(urca)
library(lmtest)
library(gridExtra)
library(seasonal)
library(readxl)
library(knitr)
library(kableExtra)
library(broom)
library(tseries)
library(gtsummary)
```

```{r}
df = read_excel("series_bcu.xlsx" , sheet = "cantidad_personas_deuda_vigente") %>%
  select(fecha, cantidad_clientes, tipoinstitucion) %>%
  filter(tipoinstitucion == "Santander")
cantidad_clientes_ts <- ts(df$cantidad_clientes, start = c(2018, 12), frequency = 12)
```

La serie presenta una clara tendencia creciente a lo largo del tiempo, especialmente a partir de 2020, con un aumento significativo hacia 2024. No parece haber una estacionalidad evidente o un patrón repetitivo a intervalos fijos. La variabilidad parece aumentar ligeramente con el nivel de la serie, lo que podría sugerir la necesidad de una transformación logarítmica si la homocedasticidad fuera un problema (aunque esto se evalúa más adelante con los residuos)

# Análisis Inicial

## Gráfico de la Serie Temporal
```{r}
autoplot(cantidad_clientes_ts) + 
  labs(x = "Fecha", y = "Cantidad de personas", title = "Serie de Cantidad de personas deuda en Santander") +
  theme(panel.grid.minor = element_blank())
```

## Estadísticas Descriptivas
```{r}
cantidad_clientes_ts |> 
  summary() |> 
  enframe(name = "Estadística", value = "Valor") |> 
  kable(caption = "Estadísticas Descriptivas de la Serie de Cantidad de Personas") 
```

# Identificación del Modelo

## Función de Autocorrelación (FAC)
```{r}
clientes_acf <- ggAcf(cantidad_clientes_ts, lag.max = 24, type = "correlation") + 
  labs(x = "Rezago", y = "Autocorrelación", title = "Función de Autocorrelación (FAC)")

clientes_acf
```

FAC (Función de Autocorrelación): La FAC decrece lentamente y de forma persistente, con coeficientes de autocorrelación significativos que se mantienen altos incluso en rezagos grandes. Esto es un fuerte indicio de que la serie no es estacionaria en media. La presencia de autocorrelaciones significativas en rezagos altos sugiere una tendencia.

## Función de Autocorrelación Parcial (FACP)
```{r}
clientes_pacf <- ggAcf(cantidad_clientes_ts, lag.max = 24, type = "partial") + 
  labs(x = "Rezago", y = "Autocorrelación parcial", title = "Función de Autocorrelación Parcial (FACP)")

clientes_pacf
```

La FACP muestra un pico significativo en el rezago 1 y luego decae rápidamente, con pocos o ningún otro rezago significativo más allá del primero. Esto podría sugerir un componente AR(1) si la serie fuera estacionaria. Sin embargo, dada la FAC, es más probable que la serie necesite ser diferenciada.

## Serie Diferenciada
```{r}
diff_cantidad_clientes_ts <- diff(cantidad_clientes_ts, differences = 1)
autoplot(diff_cantidad_clientes_ts) + 
  labs(x = "Fecha", y = "Cantidad de personas", title = "Serie de Cantidad de personas deuda en Santander diferenciada 1 vez") +
  theme(panel.grid.minor = element_blank())
```

## FACP de la Serie Diferenciada
```{r}
diff_clientes_pacf <- ggAcf(diff_cantidad_clientes_ts, lag.max = 24, type = "partial") +
  labs(x = "Rezago", y = "Autocorrelación parcial", title = "FACP de la Serie Diferenciada")

diff_clientes_pacf
```

## FAC de la Serie Diferenciada
```{r}
diff_clientes_acf <- ggAcf(diff_cantidad_clientes_ts, lag.max = 24, type = "correlation") +
  labs(x = "Rezago", y = "Autocorrelación", title = "FAC de la Serie Diferenciada")

diff_clientes_acf
```

Al analizar la Función de Autocorrelación (FAC) de la serie de "Cantidad de personas deuda en Santander" una vez diferenciada (d=1), se observa que, aunque la tendencia lineal ha sido eliminada (lo que se corrobora con los tests de Dickey-Fuller Aumentado y KPSS), persisten patrones de autocorrelación significativos.

Específicamente, notamos la presencia de picos significativos en el rezago 3, y en menor medida, en el rezago 6. Estos picos se extienden más allá de las bandas de confianza (líneas azules discontinuas), lo que indica que las observaciones están autocorrelacionadas con sus valores de hace 3 y 6 períodos.

La aparición de estos patrones recurrentes en múltiplos de un cierto rezago (en este caso, 3) es una clara evidencia de estacionalidad. Dado que estos picos ocurren cada 3 períodos, sugiere una estacionalidad de tipo trimestral si la frecuencia de los datos es trimestral, o un patrón recurrente cada tres meses si la frecuencia es mensual (pero la estacionalidad anual principal sería en el rezago 12).

La persistencia de esta autocorrelación estacional implica que el modelo aún no ha capturado completamente la estructura de la serie. Para abordar esta estacionalidad y hacer que la serie sea completamente estacionaria, es necesario aplicar una diferenciación estacional. Esto se realizará con un rezago estacional (lag) igual al período identificado (en este caso, lag=3), lo que se conoce como una diferenciación estacional de orden D=1.

## Serie Diferenciada Estacional
```{r}
diff_estacional<- diff(diff_cantidad_clientes_ts, lag = 3)
```

## Gráfico de la Serie Diferenciada Estacional
```{r}
autoplot(diff_estacional) + 
  labs(x = "Fecha", y = "Cantidad de personas", title = "Serie de Cantidad de personas deuda en Santander diferenciada 1 vez") +
  theme(panel.grid.minor = element_blank())
```

## FAC de la Serie Diferenciada Estacional
```{r}
diff_estacional_acf <- ggAcf(diff_estacional, lag.max = 24, type = "correlation") +
  labs(x = "Rezago", y = "Autocorrelación", title = "FAC de la Serie Diferenciada Estacional")

diff_estacional_acf
```

## FACP de la Serie Diferenciada Estacional
```{r}
diff_estacional_pacf <- ggAcf(diff_estacional, lag.max = 24, type = "partial") +
  labs(x = "Rezago", y = "Autocorrelación parcial", title = "FACP de la Serie Diferenciada Estacional")

diff_estacional_pacf
```

# Modelos Propuesto

## Comparación de Modelos SARIMA
```{r}
# Definir diferentes combinaciones de parámetros para probar
parametros <- list(
  # Modelo base y variaciones cercanas
  c(1,1,1,0,1,0),  # Modelo original
  c(2,1,1,0,1,0),  # Aumentar p
  c(1,1,2,0,1,0),  # Aumentar q
  c(1,1,1,1,1,0),  # Aumentar P
  c(1,1,1,0,1,1),  # Aumentar Q
  c(2,1,2,0,1,0),  # Aumentar p y q
  c(1,1,1,1,1,1),  # Aumentar P y Q
  c(0,1,1,0,1,0),  # Reducir p
  c(1,1,0,0,1,0),  # Reducir q
  c(2,1,2,1,1,1)   # Modelo más complejo
)

# Función para ajustar modelo y extraer métricas
ajustar_modelo <- function(params) {
  tryCatch({
    modelo <- Arima(y = cantidad_clientes_ts,
                   order = c(params[1], params[2], params[3]),
                   seasonal = list(order = c(params[4], params[5], params[6]), period = 3),
                   method = "ML")
    
    return(data.frame(
      p = params[1],
      d = params[2],
      q = params[3],
      P = params[4],
      D = params[5],
      Q = params[6],
      AIC = modelo$aic,
      AICc = modelo$aicc,
      BIC = modelo$bic,
      RMSE = sqrt(mean(residuals(modelo)^2))
    ))
  }, error = function(e) {
    return(NULL)
  })
}

# Ajustar todos los modelos y crear tabla comparativa
resultados <- do.call(rbind, lapply(parametros, ajustar_modelo))

# Ordenar por BIC y formatear la tabla
tabla_comparativa <- resultados %>%
  arrange(BIC) %>%
  mutate(
    Modelo = paste0("SARIMA(", p, ",", d, ",", q, ")(", P, ",", D, ",", Q, ")[3]"),
    AIC = round(AIC, 2),
    AICc = round(AICc, 2),
    BIC = round(BIC, 2),
    RMSE = round(RMSE, 2)
  ) %>%
  select(Modelo, AIC, AICc, BIC, RMSE)

# Mostrar tabla formateada
kable(tabla_comparativa, 
      caption = "Comparación de Modelos SARIMA Ordenados por BIC",
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

# Identificar el mejor modelo según BIC
mejor_modelo_idx <- which.min(resultados$BIC)
mejor_modelo_params <- parametros[[mejor_modelo_idx]]

# Ajustar el mejor modelo
mejor_modelo <- Arima(y = cantidad_clientes_ts,
                     order = c(mejor_modelo_params[1], mejor_modelo_params[2], mejor_modelo_params[3]),
                     seasonal = list(order = c(mejor_modelo_params[4], mejor_modelo_params[5], mejor_modelo_params[6]), period = 3),
                     method = "ML")
```

Se elige el modelo SARIMA(1,1,1)(0,1,1)[3] por el criterio BIC.

## Coeficientes del Modelo SARIMA
```{r}
# Obtener p-valores con coeftest para inyectarlos en gtsummary
sarima_coef_p_values_df <- coeftest(mejor_modelo) |>
  unclass() |>
  as.data.frame() |>
  tibble::rownames_to_column(var = "term") |>
  dplyr::select(term, `Pr(>|z|)`) |>
  dplyr::rename(p.value = `Pr(>|z|)`) 

tbl_regression(mejor_modelo, exponentiate = FALSE) |>
  modify_header(label = "**Término**") |>
  modify_caption("Coeficientes del Modelo SARIMA(1,1,1)(0,1,1)[3]") |>
  # Inyectar la columna de p-valores manualmente
  modify_table_body(~ .x |>
                      dplyr::left_join(sarima_coef_p_values_df, by = "term")) |>
  add_significance_stars()
```
Como los coeficientes de la constante y el AR(1) y MA(1) no son significativos, pero el componente estacional es significativo, se va a explorar el modelo SARIMA(0,1,0)(0,1,1)[3]

```{r}
```{r}
##SARIMA(0,1,0)(0,1,1)[3]
modelo_010_011 <- Arima(y = cantidad_clientes_ts,
                     order = c(0, 1, 0),
                     seasonal = list(order = c(0, 1, 1), period = 3),
                     method = "ML")
```

```{r}
sarima_coef_p_values_df <- coeftest(modelo_010_011) |>
  unclass() |>
  as.data.frame() |>
  tibble::rownames_to_column(var = "term") |>
  dplyr::select(term, `Pr(>|z|)`) |>
  dplyr::rename(p.value = `Pr(>|z|)`) 

tbl_regression(modelo_010_011, exponentiate = FALSE) |>
  modify_header(label = "**Término**") |>
  modify_caption("Coeficientes del Modelo SARIMA(0,1,0)(0,1,1)[3]") |>
  # Inyectar la columna de p-valores manualmente
  modify_table_body(~ .x |>
                      dplyr::left_join(sarima_coef_p_values_df, by = "term")) |>
  add_significance_stars()
```


## Criterios de Información del Modelo
```{r}
# Resumen del modelo (AIC, AICc, BIC)
model_sarima_metrics <- data.frame(
  AIC = modelo_010_011$aic,
  AICc = modelo_010_011$aicc,
  BIC = modelo_010_011$bic
)
kable(model_sarima_metrics, caption = "Criterios de Información del Modelo SARIMA(0,1,0)(0,1,1)[3]")
```


```{r}
mejor_modelo = modelo_010_011
```
## Medidas de Error del Modelo
```{r}
# Medidas de Error del Conjunto de Entrenamiento
error_measures_sarima <- accuracy(mejor_modelo) %>%
  as.data.frame() %>%
  tibble::rownames_to_column(var = "Conjunto") %>%
  dplyr::rename(
    RMSE = `RMSE`,
    MAE = `MAE`,
    MPE = `MPE`,
    MAPE = `MAPE`,
    MASE = `MASE`,
    ACF1 = `ACF1`
  )
kable(error_measures_sarima, caption = "Medidas de Error del Modelo SARIMA(0,1,0)(0,1,1)[3] en el Conjunto de Entrenamiento")
```


## Pruebas de Raíz Unitaria
```{r}
# Obtener residuos del modelo
residuos_mejor_modelo <- residuals(mejor_modelo)

# ADF Test
adf_result_estacional <- adf.test(residuos_mejor_modelo, alternative = "stationary")
adf_table_estacional <- data.frame(
  Test = "ADF Test",
  Statistic = adf_result_estacional$statistic,
  p_value = adf_result_estacional$p.value,
  Method = adf_result_estacional$method,
  row.names = NULL
)

# KPSS Test
kpss_result_estacional <- kpss.test(residuos_mejor_modelo, null = "Level")
kpss_table_estacional <- data.frame(
  Test = "KPSS Test",
  Statistic = kpss_result_estacional$statistic,
  p_value = kpss_result_estacional$p.value,
  Method = kpss_result_estacional$method,
  row.names = NULL
)

# Unificar las tablas
combined_tests_table_estacional <- rbind(adf_table_estacional, kpss_table_estacional)

kable(combined_tests_table_estacional, caption = "Resultados de las Pruebas de Raíz Unitaria (ADF y KPSS) en los Residuos del Modelo")
```

# Diagnóstico de los Residuos del Modelo Propuesto

## Gráfico de Residuos
```{r}
# Guardar los residuos del modelo
residuos_modelo_final <- residuos_mejor_modelo

# Graficar los residuos
autoplot(residuos_modelo_final) +
  labs(x = "Fecha", y = "Residuos", title = "Residuos del Modelo SARIMA(0,1,0)(0,1,1)[3]") +
  geom_hline(yintercept = 0, color = "red")
```

## FAC y FACP de los Residuos
```{r}
# FAC y FACP de los residuos
residuos_acf <- ggAcf(residuos_modelo_final, lag.max = 24, type = "correlation") +
  labs(x = "Rezago", y = "Autocorrelación", title = "FAC de los Residuos")
residuos_pacf <- ggAcf(residuos_modelo_final, lag.max = 24, type = "partial") +
  labs(x = "Rezago", y = "Autocorrelación parcial", title = "FACP de los Residuos")
grid.arrange(residuos_acf, residuos_pacf)
```

## Test de Ljung-Box
```{r}


ljung_box_10 <- Box.test(residuos_modelo_final, lag = 10, type = "Ljung-Box", fitdf = 3) |> tidy()
ljung_box_20 <- Box.test(residuos_modelo_final, lag = 20, type = "Ljung-Box", fitdf = 3) |> tidy()

ljung_box_combined <- rbind(ljung_box_10, ljung_box_20) %>%
  mutate(Test = c("Ljung-Box (Lag 10)", "Ljung-Box (Lag 20)"), .before = method) %>%
  select(Test, statistic, p.value, method, parameter) %>%
  rename(
    Estadistico = statistic,
    p_value = p.value,
    Metodo = method,
    Parametro = parameter
  )
kable(ljung_box_combined, caption = "Resultados del Test de Ljung-Box")
```

## Análisis de Homocedasticidad
```{r}
# Homocedasticidad (varianza constante) de los residuos
residuos_modelo_final_2 <- residuos_modelo_final^2
grafico_residuos2 <- autoplot(residuos_modelo_final_2) +
  labs(x = "Fecha", y = expression(epsilon[t]^2), title = "Cuadrado de los Residuos")
acf_residuos2 <- ggAcf(residuos_modelo_final_2, type = "correlation") +
  labs(x = "Rezago", y = "FAC", title = "FAC del Cuadrado de los Residuos")
grid.arrange(grafico_residuos2, acf_residuos2)
```

## Análisis de Normalidad
```{r}
# QQ-plot
ggplot(data.frame(residuos = residuos_modelo_final), aes(sample = residuos)) +
  stat_qq() +
  stat_qq_line(color = "red") +
  labs(x = "Cuantiles teóricos", y = "Cuantiles de la muestra", title = "QQ-plot de los Residuos")

# Histograma
ggplot(data.frame(residuos = residuos_modelo_final)) +
  geom_histogram(aes(x = residuos, y = ..density..), bins = 10) +
  stat_function(fun = dnorm, args = list(mean = mean(residuos_modelo_final), sd = sd(residuos_modelo_final)),
                col = "red", size = 1) +
  labs(x = "Residuos", y = "Densidad", title = "Histograma de los Residuos")
```

## Tests de Normalidad
```{r}
# Tests de normalidad (Shapiro-Wilk y Jarque-Bera)
shapiro_test_result <- shapiro.test(residuos_modelo_final) |> tidy()
jarque_bera_test_result <- jarque.bera.test(residuos_modelo_final) |> tidy()

normalidad_combined <- rbind(
  shapiro_test_result %>%
    mutate(Test = "Shapiro-Wilk", .before = method) %>%
    select(Test, statistic, p.value, method),
  jarque_bera_test_result %>%
    mutate(Test = "Jarque-Bera", .before = method) %>%
    select(Test, statistic, p.value, method)
) %>%
  rename(
    Estadistico = statistic,
    p_value = p.value,
    Metodo = method
  )
kable(normalidad_combined, caption = "Resultados de los Tests de Normalidad")
```


