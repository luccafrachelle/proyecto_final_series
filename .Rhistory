guides(color = guide_legend(position = "bottom"))
# Espectro de la Serie:
Espectro_Serie <- spectrum(cantidad_clientes_ts, method = c("ar"),
freq = seq(from = 0, to = 0.5, length.out = 1000), plot = FALSE)
# Se transforma las frecuencias para el intervalo [0,\pi]:
Espectro_Serie_Tibble <- tibble(Frecuencias = Espectro_Serie$freq*pi/max(Espectro_Serie$freq),
Espectro = Espectro_Serie$spec)
# Plot:
Plot_Espectro_Suavizado <- ggplot(Espectro_Serie_Tibble) +
geom_line(aes(Frecuencias, Espectro)) +
labs(x = TeX(r"($\omega$ (Frecuencias))"),
y = TeX(r"($S_{X}$(\omega))"),
title = TeX(r"(Periodograma Suavizado de la Serie)"),
subtitle = "Método: AR(1)",
color = "") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
guides(color = guide_legend(position = "bottom"))
grid.arrange(Plot_Espectro, Plot_Espectro_Suavizado, nrow = 2)
DF_Serie_Original <- ur.df(y = cantidad_clientes_ts, type = "trend", lags = 2)
# Tabla de estadísticos y valores críticos
df_results <- data.frame(
"Estadístico" = DF_Serie_Original@teststat[1,],
"VC 1%" = DF_Serie_Original@cval[,1],
"VC 5%" = DF_Serie_Original@cval[,2],
"VC 10%" = DF_Serie_Original@cval[,3]
)
rownames(df_results) <- c("tau3 (con tendencia)", "phi2", "phi3")
kable(df_results, caption = "Resultados del Test de Dickey-Fuller Aumentado")
KPSS_Serie_Original <- ur.kpss(y = cantidad_clientes_ts, type = "tau")
kpss_results_df <- data.frame(
Item = c("Estadístico de Test", "Valor Crítico 10%", "Valor Crítico 5%", "Valor Crítico 2.5%", "Valor Crítico 1%"),
Valor = c(KPSS_Serie_Original@teststat, KPSS_Serie_Original@cval[1], KPSS_Serie_Original@cval[2], KPSS_Serie_Original@cval[3], KPSS_Serie_Original@cval[4])
)
kable(kpss_results_df, caption = "Resultados del Test KPSS (con tendencia)")
diff_cantidad_clientes_ts <- diff(cantidad_clientes_ts, differences = 1)
autoplot(diff_cantidad_clientes_ts) +
labs(x = "Fecha", y = "Cantidad de
Personas",
title = "Serie de Cantidad de Personas con
Deuda en Santander",
subtitle = "Primera Diferencia Regular") +
geom_hline(aes(yintercept = mean(diff_cantidad_clientes_ts)), colour = "red") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
ggseasonplot(diff_cantidad_clientes_ts) +
labs(x = "Fecha", y = "Cantidad de
Personas",
title = "Serie de Cantidad de Personas con
Deuda en Santander",
subtitle = "Primera Diferencia Regular",
color = "Año") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
ggsubseriesplot(diff_cantidad_clientes_ts) +
labs(x = "Mes", y = "Cantidad de
Personas",
title = "Serie de Cantidad de Personas con
Deuda en Santander",
subtitle = "Primera Diferencia Regular") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
diff_clientes_acf <- ggAcf(diff_cantidad_clientes_ts, lag.max = 24, type = "correlation") +
labs(x = "k (Rezago)",
y = TeX(r"($\hat{\rho_{k}}$)"), title = "FAC de la Serie Diferenciada") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
diff_clientes_pacf <- ggAcf(diff_cantidad_clientes_ts, lag.max = 24, type = "partial") +
labs(x = "k (Rezago)",
y = TeX(r"($\hat{\alpha_{k}}$)"), title = "FACP de la Serie Diferenciada") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
grid.arrange(diff_clientes_acf, diff_clientes_pacf)
# Periodograma de la Serie:
Espectro_Serie_Diferenciada <- spectrum(diff_cantidad_clientes_ts, method = c("pgram"),
freq = seq(from = 0, to = 0.5, length.out = 1000), plot = F)
# Se transforma las frecuencias para el intervalo [0,\pi]:
Espectro_Serie_Diferenciada_Tibble <- tibble(Frecuencias = Espectro_Serie_Diferenciada$freq*pi/max(Espectro_Serie_Diferenciada$freq),
Espectro = Espectro_Serie_Diferenciada$spec)
# Plot:
Plot_Espectro_Serie_Diferenciada <- ggplot(Espectro_Serie_Diferenciada_Tibble) +
geom_line(aes(Frecuencias, Espectro)) +
labs(x = TeX(r"($\omega$ (Frecuencias))"),
y = TeX(r"($S_{X}$(\omega))"),
title = TeX(r"(Periodograma de la Serie Diferenciada)"),
color = "") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
guides(color = guide_legend(position = "bottom"))
# Espectro de la Serie:
Espectro_Serie_Diferenciada <- spectrum(diff_cantidad_clientes_ts, method = c("ar"),
freq = seq(from = 0, to = 0.5, length.out = 1000), plot = F)
# Se transforma las frecuencias para el intervalo [0,\pi]:
Espectro_Serie_Diferenciada_Tibble <- tibble(Frecuencias = Espectro_Serie_Diferenciada$freq*pi/max(Espectro_Serie_Diferenciada$freq),
Espectro = Espectro_Serie_Diferenciada$spec)
# Plot:
Plot_Espectro_Serie_Diferenciada_Suavizado <- ggplot(Espectro_Serie_Diferenciada_Tibble) +
geom_line(aes(Frecuencias, Espectro)) +
labs(x = TeX(r"($\omega$ (Frecuencias))"),
y = TeX(r"($S_{X}$(\omega))"),
title = TeX(r"(Periodograma Suavizado de la Serie Diferenciada)"),
subtitle = "Método: AR(3)",
color = "") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
guides(color = guide_legend(position = "bottom"))
grid.arrange(Plot_Espectro_Serie_Diferenciada, Plot_Espectro_Serie_Diferenciada_Suavizado, nrow = 2)
DF_Serie_Diferenciada <- ur.df(y = diff_cantidad_clientes_ts, type = "drift", selectlags = "BIC")
KPSS_Serie_Diferenciada <- ur.kpss(y = diff_cantidad_clientes_ts, type = "mu")
# DF rechaza Nula, no se tiene raíz unitaria.
# KPSS no se rechaza que sea I(0).
# Tabla de estadísticos y valores críticos
df_results <- data.frame(
"Estadístico" = DF_Serie_Diferenciada@teststat[1,],
"VC 1%" = DF_Serie_Diferenciada@cval[,1],
"VC 5%" = DF_Serie_Diferenciada@cval[,2],
"VC 10%" = DF_Serie_Diferenciada@cval[,3]
)
rownames(df_results) <- c("tau2 (con constante)", "phi1")
kable(df_results, caption = "Resultados del Test de Dickey-Fuller Aumentado")
kpss_results_df <- data.frame(
Item = c("Estadístico de Test", "Valor Crítico 10%", "Valor Crítico 5%", "Valor Crítico 2.5%", "Valor Crítico 1%"),
Valor = c(KPSS_Serie_Diferenciada@teststat, KPSS_Serie_Diferenciada@cval[1], KPSS_Serie_Diferenciada@cval[2], KPSS_Serie_Diferenciada@cval[3], KPSS_Serie_Diferenciada@cval[4])
)
kable(kpss_results_df, caption = "Resultados del Test KPSS (con constante)")
diff_estacional_anual <- diff(diff_cantidad_clientes_ts, lag = 12)
autoplot(diff_estacional_anual) +
labs(x = "Fecha", y = "Cantidad de
Personas",
title = "Serie de Cantidad de Personas con
Deuda en Santander",
subtitle = "Primera Diferencia Regular y Primera Diferencia Estacional (Anual)") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
diff_estacional_anual_acf <- ggAcf(diff_estacional_anual, lag.max = 24, type = "correlation") +
labs(x = "k (Rezago)",
y = TeX(r"($\hat{\rho_{k}}$)"), title = "FAC de la Serie Diferenciada (Regular y Estacional)") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
diff_estacional_anual_pacf <- ggAcf(diff_estacional_anual, lag.max = 24, type = "partial") +
labs(x = "k (Rezago)",
y = TeX(r"($\hat{\alpha_{k}}$)"), title = "FACP de la Serie Diferenciada (Regular y Estacional)") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
grid.arrange(diff_estacional_anual_acf, diff_estacional_anual_pacf)
# Espectro de la Serie:
Espectro_Serie_Diferenciada_Est_12 <- spectrum(diff_estacional_anual, method = c("pgram"),
freq = seq(from = 0, to = 0.5, length.out = 1000), plot = F)
# Se transforma las frecuencias para el intervalo [0,\pi]:
Espectro_Serie_Diferenciada_Tibble_12 <- tibble(Frecuencias = Espectro_Serie_Diferenciada_Est_12$freq*pi/max(Espectro_Serie_Diferenciada_Est_12$freq),
Espectro = Espectro_Serie_Diferenciada_Est_12$spec)
# Plot:
Plot_Espectro_Serie_Diferenciada_12 <- ggplot(Espectro_Serie_Diferenciada_Tibble_12) +
geom_line(aes(Frecuencias, Espectro)) +
labs(x = TeX(r"($\omega$ (Frecuencias))"),
y = TeX(r"($S_{X}$(\omega))"),
title = TeX(r"(Periodograma de la Serie Diferenciada)"),
color = "") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
guides(color = guide_legend(position = "bottom"))
Espectro_Serie_Diferenciada_Est_12 <- spec.ar(diff_estacional_anual, n.freq = 1000, #order = 1,
plot = F)
# Se transforma las frecuencias para el intervalo [0,\pi]:
Espectro_Serie_Diferenciada_Tibble_12 <- tibble(Frecuencias = Espectro_Serie_Diferenciada_Est_12$freq*pi/max(Espectro_Serie_Diferenciada_Est_12$freq),
Espectro = Espectro_Serie_Diferenciada_Est_12$spec)
# Plot:
Plot_Espectro_Serie_Diferenciada_Suavizado_12 <- ggplot(Espectro_Serie_Diferenciada_Tibble_12) +
geom_line(aes(Frecuencias, Espectro)) +
labs(x = TeX(r"($\omega$ (Frecuencias))"),
y = TeX(r"($S_{X}$(\omega))"),
title = TeX(r"(Periodograma Suavizado de la Serie Diferenciada)"),
subtitle = "Método: AR(0)",
color = "") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
guides(color = guide_legend(position = "bottom"))
grid.arrange(Plot_Espectro_Serie_Diferenciada_12, Plot_Espectro_Serie_Diferenciada_Suavizado_12)
Modelo_Prueba_2 <- Arima(y = cantidad_clientes_ts,
order = c(3, 1, 0),
#seasonal = list(order = c(0,1,1), period = 12),
fixed = c(
0, 0, NA
),
method = "ML")
tbl_regression(Modelo_Prueba_2, exponentiate = FALSE, tidy_fun = tidy_arima) |>
add_significance_stars(hide_ci = FALSE, hide_p = FALSE) |>
modify_caption("Coeficientes del Modelo SARIMA(3,1,0)(0,0,0)")
model_m2_initial_metrics <- data.frame(
AIC = Modelo_Prueba_2$aic,
AICc = Modelo_Prueba_2$aicc,
BIC = Modelo_Prueba_2$bic
)
kable(model_m2_initial_metrics, caption = "Criterios de Información del Modelo Inicial")
# Detección de atípicos en un modelo base
outlier_m2_detect <- tso(cantidad_clientes_ts,
cval = 2.5,
types = c("AO", "LS", "TC"),
tsmethod = "arima",
args.tsmethod = list(order = c(2, 1, 0),
seasonal = list(order = c(1,1,0), period = 12),
include.mean= FALSE))
# Creación de regresores para atípicos
AO_2019_09_m2 <- tsoutliers::outliers.effects(tsoutliers::outliers(type = "AO", ind = 10), length(cantidad_clientes_ts))
TC_2019_12_m2 <- tsoutliers::outliers.effects(tsoutliers::outliers(type = "TC", ind = 13), length(cantidad_clientes_ts))
TC_2021_12_m2 <- tsoutliers::outliers.effects(tsoutliers::outliers(type = "TC", ind = 37), length(cantidad_clientes_ts))
AO_2023_02_m2 <- tsoutliers::outliers.effects(tsoutliers::outliers(type = "AO", ind = 51), length(cantidad_clientes_ts))
AO_2023_08_m2 <- tsoutliers::outliers.effects(tsoutliers::outliers(type = "AO", ind = 57), length(cantidad_clientes_ts))
TC_2023_10_m2 <- tsoutliers::outliers.effects(tsoutliers::outliers(type = "TC", ind = 59), length(cantidad_clientes_ts))
TC_2024_06_m2 <- tsoutliers::outliers.effects(tsoutliers::outliers(type = "TC", ind = 67), length(cantidad_clientes_ts))
xreg_m2 <- cbind(AO_2019_09_m2, TC_2019_12_m2, TC_2021_12_m2, AO_2023_02_m2, AO_2023_08_m2, TC_2023_10_m2, TC_2024_06_m2)
modelo_2 <- Arima(y = cantidad_clientes_ts,
order = c(2, 1, 0),
seasonal = list(order = c(1,1,0), period = 12),
fixed = c(0, NA, NA, NA, NA, NA, NA, NA, NA, NA),
xreg = xreg_m2,
method = "ML")
tbl_regression(modelo_2, exponentiate = FALSE, tidy_fun = tidy_arima) |>
add_significance_stars(hide_ci = FALSE, hide_p = FALSE) |>
modify_caption("Coeficientes del Modelo SARIMA(2,1,0)(1,1,0)")
model_m2_metrics <- data.frame(
AIC = modelo_2$aic,
AICc = modelo_2$aicc,
BIC = modelo_2$bic
)
kable(model_m2_metrics, caption = "Criterios de Información del Modelo SARIMA(2,1,0)(1,1,0)")
error_measures_m2 <- accuracy(modelo_2) %>% as.data.frame()
kable(error_measures_m2, caption = "Medidas de Error del Modelo SARIMA(2,1,0)(1,1,0)")
residuos_m2 <- residuals(modelo_2)
autoplot(residuos_m2) +
labs(x = "Fecha", y = "Residuos", title = "Residuos del Modelo SARIMA(2,1,0)(1,1,0)") +
geom_hline(yintercept = 0, color = "red") +
theme_minimal()
residuos_m2_acf <- ggAcf(residuos_m2, lag.max = 24, type = "correlation") +
labs(title = "FAC de los Residuos del Modelo SARIMA(2,1,0)(1,1,0)") +
theme_minimal()
residuos_m2_pacf <- ggAcf(residuos_m2, lag.max = 24, type = "partial") +
labs(title = "FACP de los Residuos del Modelo SARIMA(2,1,0)(1,1,0)") +
theme_minimal()
grid.arrange(residuos_m2_acf, residuos_m2_pacf)
ljung_box_df_m2 <- tibble()
for(i in c(3, 6, 9, 12,24)){
ljung_box_df_m2 <- rbind(ljung_box_df_m2, (Box.test(
residuos_m2, lag = i, type = "Ljung-Box", fitdf = 3) %>% tidy())) # 2 + 1, Regular + Estacional
}
kable(ljung_box_df_m2, caption = "Test de Ljung-Box para Residuos del Modelo SARIMA(2,1,0)(1,1,0) (Rezagos 3, 6, 9, 12 y 24)")
# Residuos estandarizados
residuos_estandarizados_m2 <- residuos_m2 / sqrt(modelo_2$sigma2)
autoplot(residuos_estandarizados_m2) +
labs(x = "Año", y = "Residuos Estandarizados", title = "Residuos Estandarizados del Modelo SARIMA(2,1,0)(1,1,0)") +
geom_hline(yintercept = 3, color = "red") +
geom_hline(yintercept = -3, color = "red") +
theme_minimal()
ggplot(data.frame(residuos = residuos_m2), aes(sample = residuos)) +
stat_qq() + stat_qq_line(color = "red") +
labs(title = "QQ-plot de Residuos del Modelo SARIMA(2,1,0)(1,1,0)") +
theme_minimal()
shapiro_test_m2 <- shapiro.test(residuos_m2) |> tidy()
jarque_bera_test_m2 <- jarque.bera.test(residuos_m2) |> tidy()
normalidad_m2 <- dplyr::bind_rows(
"Shapiro-Wilk" = shapiro_test_m2,
"Jarque-Bera" = jarque_bera_test_m2,
.id = "Test"
)
kable(normalidad_m2, caption = "Tests de Normalidad para Residuos del Modelo SARIMA(2,1,0)(1,1,0)")
residuos_m2_sq <- residuos_m2^2
residuos_sq_acf_m2 <- ggAcf(residuos_m2_sq, lag.max=24, type = "correlation") + labs(title = "FAC del Cuadrado de los Residuos del Modelo SARIMA(2,1,0)(1,1,0)") + theme_minimal()
residuos_sq_pacf_m2 <- ggAcf(residuos_m2_sq, lag.max=24, type = "partial") + labs(title = "FACP del Cuadrado de los Residuos del Modelo SARIMA(2,1,0)(1,1,0)")  + theme_minimal()
grid.arrange(residuos_sq_acf_m2, residuos_sq_pacf_m2)
# Ljung-Box para los Cuadrados de los Residuos.
ljung_box_df_m2_residuos_cuadrado <- tibble()
for(i in c(3, 6, 9, 12, 24)){
ljung_box_df_m2_residuos_cuadrado <- rbind(
ljung_box_df_m2_residuos_cuadrado,
(Box.test(residuos_m2_sq,
lag = i, type = "Ljung-Box", fitdf = 3) %>% tidy()))
};rm(i)
kable(ljung_box_df_m2, caption = "Test de Ljung-Box para el Cuadrado de los Residuos del Modelo SARIMA(2,1,0)(1,1,0) (Rezagos 3, 6, 9, 12 y 24)")
Media_Testear <- mean(residuos_m2)/(sd(residuos_m2)/sqrt(73))
Resultado_Prueba_t <- (t.test(residuos_m2, mu = 0) %>% tidy)[,1:4]
kable(Resultado_Prueba_t, caption = "Tests de Media Nula para Residuos del Modelo SARIMA(2,1,0)(1,1,0)")
# Crear matriz de regresores futuros, ceros en caso de AO, pero en caso de TS que continuen el decaimiento.
# Predicciones a 12 pasos:
xreg_prediccion_m2 <- tibble(
AO10 = tsoutliers::outliers.effects(tsoutliers::outliers(type = "AO", ind = 10), length(cantidad_clientes_ts) + 12),
TC13 = tsoutliers::outliers.effects(tsoutliers::outliers(type = "TC", ind = 13), length(cantidad_clientes_ts) + 12),
TC37 = tsoutliers::outliers.effects(tsoutliers::outliers(type = "TC", ind = 37), length(cantidad_clientes_ts) + 12),
AO51 = tsoutliers::outliers.effects(tsoutliers::outliers(type = "AO", ind = 51), length(cantidad_clientes_ts) + 12),
AO57 = tsoutliers::outliers.effects(tsoutliers::outliers(type = "AO", ind = 57), length(cantidad_clientes_ts) + 12),
TC59 = tsoutliers::outliers.effects(tsoutliers::outliers(type = "TC", ind = 59), length(cantidad_clientes_ts) + 12),
TC67 = tsoutliers::outliers.effects(tsoutliers::outliers(type = "TC", ind = 67), length(cantidad_clientes_ts) + 12)
)
Predicciones_Modelo_2 <- forecast(
modelo_2, fan = TRUE, xreg = as.matrix(xreg_prediccion_m2[74:85,]), h = 12)
autoplot(object = Predicciones_Modelo_2) +
labs(title = "Cantidad de Clientes con Deuda en Santander:
Predicción de 2025",
subtitle = TeX(r"(Modelo SARIMA$(2,1,0)(1,1,0)$)"),
x = "Fecha", y = "") +
theme_minimal()
Comparacion_Prediccion_Realidad_Modelo_2 <- tibble(
Fecha = (time(cantidad_clientes_ts_completa) %>% as.Date())[(length(cantidad_clientes_ts_completa)-2):length(cantidad_clientes_ts_completa)],
Predicción = Predicciones_Modelo_2$mean[1:3],
Realidad = cantidad_clientes_ts_completa[(length(cantidad_clientes_ts_completa)-2):length(cantidad_clientes_ts_completa)]) %>%
pivot_longer(cols = c(Predicción, Realidad),
names_to = "Serie",
values_to = "Valores")
ggplot(Comparacion_Prediccion_Realidad_Modelo_2) +
geom_line(aes(x = Fecha, y = Valores, color = Serie)) +
theme_minimal() +
labs(
title = "Cantidad de Clientes con Deuda en Santander:
Predicción contra Realidad",
subtitle = TeX(r"(Modelo SARIMA$(2,1,0)(1,1,0)$)"),
y = "",
x = "Fecha",
color = ""
) +
guides(color = guide_legend(position = "bottom"))
Predicciones_Modelo_2_Tabla_ICs <- forecast(
modelo_2, fan = FALSE, xreg = as.matrix(xreg_prediccion_m2[74:85,]), h = 12,
level = c(50, 75, 90, 96))
Tabla_ICs_1 <- (Predicciones_Modelo_2_Tabla_ICs %>% as.tibble %>% janitor::clean_names())[1:3,] %>%
select(lo_50, hi_50) %>%
cbind(
tibble(
Fecha = c("Enero - 2025", "Febrero - 2025", "Marzo - 2025"),
Prediccion = Predicciones_Modelo_2_Tabla_ICs$mean[1:3],
Realidad = cantidad_clientes_ts_completa[(length(cantidad_clientes_ts_completa)-2):length(cantidad_clientes_ts_completa)])
) %>%
mutate(Capturado = ifelse((lo_50 <= Realidad)&(hi_50 >= Realidad), "Si", "No")) %>%
select(Fecha, `Límite Inferior 50%` = lo_50, Predicción = Prediccion, `Límite Superior 50%` = hi_50, Realidad, Capturado)
kable(Tabla_ICs_1, caption = "Intervalos de Confianza al 50% de los Primeros 3 Meses de 2025 contra Realidad")
Tabla_ICs_2 <- (Predicciones_Modelo_2_Tabla_ICs %>% as.tibble %>% janitor::clean_names())[1:3,] %>%
select(lo_75, hi_75) %>%
cbind(
tibble(
Fecha = c("Enero - 2025", "Febrero - 2025", "Marzo - 2025"),
Prediccion = Predicciones_Modelo_2_Tabla_ICs$mean[1:3],
Realidad = cantidad_clientes_ts_completa[(length(cantidad_clientes_ts_completa)-2):length(cantidad_clientes_ts_completa)])
) %>%
mutate(Capturado = ifelse((lo_75 <= Realidad)&(hi_75 >= Realidad), "Si", "No")) %>%
select(Fecha, `Límite Inferior 75%` = lo_75, Predicción = Prediccion, `Límite Superior 75%` = hi_75, Realidad, Capturado)
kable(Tabla_ICs_2, caption = "Intervalos de Confianza al 75% de los Primeros 3 Meses de 2025 contra Realidad")
Tabla_ICs_3 <- (Predicciones_Modelo_2_Tabla_ICs %>% as.tibble %>% janitor::clean_names())[1:3,] %>%
select(lo_90, hi_90) %>%
cbind(
tibble(
Fecha = c("Enero - 2025", "Febrero - 2025", "Marzo - 2025"),
Prediccion = Predicciones_Modelo_2$mean[1:3],
Realidad = cantidad_clientes_ts_completa[(length(cantidad_clientes_ts_completa)-2):length(cantidad_clientes_ts_completa)])
) %>%
mutate(Capturado = ifelse((lo_90 <= Realidad)&(hi_90 >= Realidad), "Si", "No")) %>%
select(Fecha, `Límite Inferior 90%` = lo_90, Predicción = Prediccion, `Límite Superior 90%` = hi_90, Realidad, Capturado)
kable(Tabla_ICs_3, caption = "Intervalos de Confianza al 90% de los Primeros 3 Meses de 2025 contra Realidad")
Tabla_ICs_4 <- (Predicciones_Modelo_2_Tabla_ICs %>% as.tibble %>% janitor::clean_names())[1:3,] %>%
select(lo_96, hi_96) %>%
cbind(
tibble(
Fecha = c("Enero - 2025", "Febrero - 2025", "Marzo - 2025"),
Prediccion = Predicciones_Modelo_2$mean[1:3],
Realidad = cantidad_clientes_ts_completa[(length(cantidad_clientes_ts_completa)-2):length(cantidad_clientes_ts_completa)])
) %>%
mutate(Capturado = ifelse((lo_96 <= Realidad)&(hi_96 >= Realidad), "Si", "No")) %>%
select(Fecha, `Límite Inferior 96%` = lo_96, Predicción = Prediccion, `Límite Superior 96%` = hi_96, Realidad, Capturado)
kable(Tabla_ICs_4, caption = "Intervalos de Confianza al 96% de los Primeros 3 Meses de 2025 contra Realidad")
test_clientes <- window(cantidad_clientes_ts_completa, start = c(2025,1))
acc1 <- round(accuracy(Predicciones_Modelo_2, test_clientes), 4)
kable(acc1, caption = r"(Métricas de Predicción - SARIMA$(2,1,0)(1,1,0)$)")
# Predicción afuera de la Muestra:
# Muestra de entrenamiento ("training set") hasta 2022 inclusive
train_clientes <- window(cantidad_clientes_ts_completa, end = c(2023,12))
# length(train_clientes)
# Dejamos los datos de 2023 como conjunto de prueba ("test set")
test_clientes <- window(cantidad_clientes_ts_completa, start = 2024)
n <- length(test_clientes)
# Modelo 2 Entrenado hasta 2023.
Modelo_Final_train_m2 <- Arima(y = train_clientes,
order = c(2, 1, 0),
seasonal = list(order = c(1,1,0), period = 12),
fixed = c(
0, NA,
NA,
NA, NA, NA, NA, NA, NA #, NA
), # Un outlier vendría después.
xreg = xreg_m2[1:61,1:6],
method = "ML")
# Predicción fuera de la muestra:
Pred_Final_Test_m2 <- forecast(Modelo_Final_train_m2, h = n,
xreg = as.matrix(xreg_prediccion_m2[62:(dim(xreg_prediccion_m2)[1] -9),1:6]))
# accuracy(Pred_Final_Test_m2, test_clientes)
autoplot(object = Pred_Final_Test_m2) +
labs(title = "Cantidad de Clientes con Deuda en Santander:
Predicción de 2024 y Principios 2025",
subtitle = TeX(r"(Modelo SARIMA$(2,1,0)(1,1,0)$)"),
x = "Fecha", y = "") +
theme_minimal()
Predicciones_Dentro_Muestra_Tibble_m2 <- tibble(
Fecha = Pred_Final_Test_m2$mean %>% time %>% as.Date(),
Predicción = Pred_Final_Test_m2$mean[1:length(Pred_Final_Test_m2$mean %>% time %>% as.Date())],
Realidad = cantidad_clientes_ts_completa[
(length(cantidad_clientes_ts_completa)-(
length(Pred_Final_Test_m2$mean %>% time %>% as.Date())-1)):length(cantidad_clientes_ts_completa)]) %>%
pivot_longer(cols = c(Predicción, Realidad),
names_to = "Serie",
values_to = "Valores")
ggplot(Predicciones_Dentro_Muestra_Tibble_m2) +
geom_line(aes(x = Fecha, y = Valores, color = Serie)) +
theme_minimal() +
labs(
title = "Cantidad de Clientes con Deuda en Santander:
Predicciones dentro de Muestra",
subtitle = TeX(r"(Modelo SARIMA$(2,1,0)(1,1,0)$)"),
y = "",
x = "Fecha",
color = ""
) +
guides(color = guide_legend(position = "bottom"))
acc2 <- round(accuracy(Pred_Final_Test_m2, test_clientes), 4)
kable(acc2, caption = r"(Métricas de Predicción - SARIMA$(2,1,0)(1,1,0)$)")
# Si se lograra capturar el atípico, es decir, darse cuenta que en
# Junio de 2024 ocurrió un cambio transitorio.
train_clientes <- window(cantidad_clientes_ts_completa, end = c(2024,6))
# length(train_clientes)
# Dejamos los datos de 2023 como conjunto de prueba ("test set")
test_clientes <- window(cantidad_clientes_ts_completa, start = c(2024,7))
n <- length(test_clientes)
# Modelo 3
Modelo_Final_train_m2_2 <- Arima(y = train_clientes,
order = c(2, 1, 0),
seasonal = list(order = c(1,1,0), period = 12),
fixed = c(
0, NA,
NA,
NA, NA, NA, NA, NA, NA, NA
), # Un outlier vendría después.
xreg = xreg_m2[1:67,],
method = "ML")
Pred_Final_Test_m2_2 <- forecast(Modelo_Final_train_m2_2, h = n,
xreg = as.matrix(xreg_prediccion_m2[68:(dim(xreg_prediccion_m2)[1]),]))
# accuracy(Pred_Final_Test_m2_2, test_clientes)
autoplot(object = Pred_Final_Test_m2_2) +
labs(title = "Cantidad de Clientes con Deuda en Santander:
Predicción a partir de Junio de 2024",
subtitle = TeX(r"(Modelo SARIMA$(2,1,0)(1,1,0)$)"),
x = "Fecha", y = "") +
theme_minimal()
Predicciones_Dentro_Muestra_Tibble_m2_2 <- tibble(
Fecha = (Pred_Final_Test_m2_2$mean %>% time %>% as.Date())[1:9],
Predicción = Pred_Final_Test_m2_2$mean[1:9],
Realidad = cantidad_clientes_ts_completa[
(length(cantidad_clientes_ts_completa)-(8)):length(cantidad_clientes_ts_completa)]) %>%
pivot_longer(cols = c(Predicción, Realidad),
names_to = "Serie",
values_to = "Valores")
ggplot(Predicciones_Dentro_Muestra_Tibble_m2_2) +
geom_line(aes(x = Fecha, y = Valores, color = Serie)) +
labs(
title = "Cantidad de Clientes con Deuda en Santander:
Predicciones dentro de Muestra",
subtitle = TeX(r"(Modelo SARIMA$(2,1,0)(1,1,0)$)"),
y = "",
x = "Fecha",
color = ""
) +
theme_minimal() +
guides(color = guide_legend(position = "bottom"))
acc3 <- round(accuracy(Pred_Final_Test_m2_2, test_clientes), 4)
kable(acc3, caption = r"(Métricas de Predicción - SARIMA$(2,1,0)(1,1,0)$)")
load("./data/Salidas_Script_Componentes.Rdata")
grid.arrange(Plot_1_Serie_Original, Plot_2_Serie_Desestacionalizada, Plot_4_SA_T, nrow = 3)
grid.arrange(Plot_5_Estacional, Plot_6_Irregular, nrow = 2)
grid.arrange(Plot_8_Prediccion_Serie_Desestacionalizada, Plot_9_Componente_Tendencia, nrow = 2)
## series log
cantidad_clientes_ts_log <- log(cantidad_clientes_ts)
autoplot(log(cantidad_clientes_ts_completa)) +
labs(x = "Fecha", y = TeX(r"($\log($Cantidad$)$)"), title = "Serie del Logaritmo de la Cantidad de Personas
con Deuda en Santander") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme(panel.grid.minor = element_blank())
DF_Serie_Original <- ur.df(y = cantidad_clientes_ts, type = "trend", lags = 1)
plot(DF_Serie_Original)
DF_Serie_Original <- ur.df(y = cantidad_clientes_ts, type = "trend", lags = 2)
plot(DF_Serie_Original)
# Tabla de regresión del test
DF_Serie_Original@testreg |>
tbl_regression(intercept = TRUE) |>
add_significance_stars(hide_ci = FALSE, hide_p = FALSE) |>
modify_caption("Regresión del Test de Dickey-Fuller Aumentado")
plot(DF_Serie_Diferenciada)
# Tabla de regresión del test
DF_Serie_Diferenciada@testreg |>
tbl_regression(intercept = TRUE) |>
add_significance_stars(hide_ci = FALSE, hide_p = FALSE) |>
modify_caption("Regresión del Test de Dickey-Fuller Aumentado")
load("./data/Resultados_X13_Automatic_Modelling.Rdata")
kable(model_x13_metrics, caption = r"(Criterios de Información del Modelo sugerido por X13 - SARIMA$(0,1,0)(1,0,1)$)")
kable(model_x13_coefs, caption = r"(Coeficientes Estimados del Modelo sugerido por X13 - SARIMA$(0,1,0)(1,0,1)$)")
kable(model_x13_regression, caption = r"(Media y Outliers del Modelo sugerido por X13 - SARIMA$(0,1,0)(1,0,1)$)")
kable(acc_x13, caption = r"(Métricas de Predicción del Modelo sugerido por X13 - SARIMA$(0,1,0)(1,0,1)$)")
kable(acc1, caption = r"(Métricas de Predicción - SARIMA$(2,1,0)(1,1,0)$)")
Plot_Prediccion_Serie
tinytex::reinstall_tinytex()
